PROJECT EFFORT ESTIMATION	
The science (or art) of project management is in making trade-offs among three important con- cepts: the functionality of the system, the time to complete the project (when the project will be finished), and the cost of the project. Think of these three things as interdependent levers that the project manager controls throughout the development of the system. Whenever one lever is pulled, the other two levers are affected in some way. For example, if a project manager needs to readjust a deadline to an earlier date, then the only solutions are to decrease the functionality of the system or to increase costs by adding more people or having them work overtime. Often, a project manager has to work with the project sponsor to change the goals of the project, such as developing a system with less functionality or extending the deadline for the final system, so that the project has reasonable goals that can be met. In the beginning of the project, the manager needs to estimate each of these levers and then continuously assess how to roll out the project in a way that meets the organization’s needs. Estimation is the process of assigning projected values for time and effort. The estimates developed at the start of a project are usually based on a range of possible values and gradually become more specific as the project moves forward. That is, the range of values for the inception phase will be much greater than for the transition phase. The numbers used to calculate these estimates can be taken from projects with similar tasks and technologies or provided by experienced developers. Generally speaking, the num- bers should be conservative. A good practice is to keep track of the actual values for time and effort during the development process so that numbers can be refined along the way and the
next project can benefit from real data.
There are a variety of ways to estimate the time required to build a system. Because the Unified Process is use-case driven, we use an approach that is based on use cases: use-case points.4 Use-case points, originally developed by Gustav Karner of Objectory AB,5 are based
4 The material in this section is based on descriptions of use-case points contained in Raul R. Reed, Jr., Developing Applications with Java and UML (Reading, MA: Addison-Wesley, 2002); Geri Schneider and Jason P. Winters, Apply- ing Use Cases: A Practical Guide (Reading, MA: Addison-Wesley, 1998); Kirsten Ribu, “Estimating Object-Oriented Software Projects with Use Cases” (Master’s thesis, University of Oslo, 2001).
5 Objectory AB was acquired by Rational in 1995 and Rational is now part of IBM.
 

on unique features of use cases and object orientation. From a practical point of view, to estimate effort using use-case points, the use cases and the use-case diagram must have been created.6
Use-case models have two primary constructs: actors and use cases. An actor repre- sents a role that a user of the system plays, not a specific user. For example, a role could be secretary or manager. Actors can also represent other systems that will interact with the system under development. For use-case point estimation purposes, actors can be classified as simple, average, or complex. Simple actors are separate systems with which the current system must communicate through a well-defined application program interface (API). Average actors are separate systems that interact with the current system using standard communication protocols, such as TCP/IP, FTP, or HTTP, or an external database that can be accessed using standard SQL. Complex actors are typically end users commu- nicating with the system. Once all of the actors have been categorized as being simple, average, or complex, the project manager counts the number of actors in each category and enters the values into the unadjusted actor-weighting table contained in the use-case point–estimation worksheet (see Figure 2-15). The project manager then computes the Unadjusted Actor Weight Total (UAW). This is computed by summing the individual results that were computed by multiplying the weighting factor by the number of actors of each type. For example, if we assume that the use-case diagram has zero simple, zero average, and four complex actors that interact with the system being developed, the UAW will equal 12 (see Figure 2-16).
A use case represents a major business process that the system will perform that benefits the actor(s) in some manner. Depending on the number of unique transactions that the use case must address, a use case can be categorized as being simple, average, or complex. A use case is classified as simple if it supports one to three transactions, as average if it supports four to seven transactions, or as complex if it supports more than seven transactions. Once all of the use cases have been successfully categorized, the project manager enters the number of each type of use case into the unadjusted use-case weighting table contained in the use-case point–estimation worksheet (see Figure 2-15). By multiplying by the appropriate weights and summing the results, we get the value for the unadjusted use-case weight total (UUCW). For example, if we assume that we have three simple use cases, four average use cases, and one complex use case, the value for the unadjusted use-case weight total is 70 (see Figure 2-16). Next, the project manager computes the value of the unadjusted use-case points (UUCP) by simply summing the unadjusted actor weight total and the unadjusted use-case weight total. In this case the value of the UUCP equals 82 (see Figure 2-16).
Use-case point-based estimation also has a set of factors that are used to adjust the use-case point value. In this case, there are two sets of factors: technical complexity factors (TCFs) and environmental factors (EFs). There are thirteen separate technical factors and eight separate environmental factors. The purpose of these factors is to allow the project as a whole to be evaluated for the complexity of the system being developed and the expe- rience levels of the development staff, respectively. Obviously, these types of factors can affect the effort that a team requires to develop a system. Each of these factors is assigned a value between 0 and 5, 0 indicating that the factor is irrelevant to the system under con- sideration and 5 indicating that the factor is essential for the system to be successful. The assigned values are then multiplied by their respective weights. These weighted values are then summed up to create a technical factor value (TFactor) and an environmental factor value (EFactor) (see Figure 2-15).


6 We cover the details of use-case modeling in Chapter 4.
The technical factors include the following (see Figure 2-15):
¦	Whether the system is going to be a distributed system
¦	The importance of response time
¦	The efficiency level of the end user using the system
¦	The complexity of the internal processing of the system
¦	The importance of code reuse
¦	How easy the installation process has to be
¦	The importance of the ease of using the system
¦	How important it is for the system to be able to be ported to another platform
¦	Whether system maintenance is important
¦	Whether the system is going to have to handle parallel and concurrent processing
¦	The level of special security required
¦	The level of system access by third parties
¦	Whether special end user training is to be required.
Assuming the values for the technical factors are T1 (0), T2 (5), T3 (3), T4 (1), T5 (1), T6 (2), T7 (4), T8 (0), T9 (2), T10 (0), T11 (0), T12 (0), and T13 (0), respectively, the
technical factor value (TFactor) is computed as the weighted sum of the individual technical factors. In this case TFactor equals 15 (see Figure 2-16). Plugging this value into the technical complexity factor (TCF) equation (0.6 1 (.01 * TFactor)) of the use-case point worksheet gives a value of .75 for the TCF of the system (see Figures 2-15 and 2-16).
The environmental factors include the following (see Figure 2-15):
¦	The level of experience the development staff has with the development process being used
¦	The application being developed
¦	The level of object-oriented experience
¦	The level of capability of the lead analyst
¦	The level of motivation of the development team to deliver the system
¦	The stability of the requirements
¦	Whether part-time staff have to be included as part of the development team
¦	The difficulty of the programming language being used to implement the system
Assuming the values for the environmental factors were E1 (4), E2 (4), E3 (4), E4 (5), E5 (5), E6 (5), E7 (0), and E8 (4) gives an environmental factor value (EFactor) of 25.5 (see Figure 2-16). Like the TFactor, Efactor is simply the sum of the weighted values. Using the envi- ronmental factor (EF) equation (1.4 1 (20.03 * EFactor)) of the use-case point worksheet produces a value of .635 for the EF of the system (see Figures 2-15 and 2-16). Plugging the TCF and EF values, along with the UUCP value computed earlier, into the adjusted use-case points equation (UUCP * TCF * EF) of the worksheet yields a value of 33.3375 adjusted use- case points (UCP) (see Figure 2-16).
Now that we know the estimated size of the system by means of the value of the adjusted use-case points, we are ready to estimate the effort required to build the system. In Karner’s original work, he suggested simply multiplying the number of use-case points by 20 to estimate the number of person-hours required to build the system. However, based on additional experiences using use-case points, a decision rule to determine the value of the
 

person-hours multiplier (PHM) has been created that suggests using either 20 or 28, based on the values assigned to the individual environmental factors. The decision rule is:
If the sum of (number of Efactors E1 through E6 assigned value , 3) and (number of Efactors E7 and E8 assigned value . 3)
< 2
PHM 5 20
Else If the sum of (number of Efactors E1 through E6 assigned value , 3) and (number of Efactors E7 and E8 assigned value . 3)
5 3 or 4
PHM 5 28
 
Else
 
Rethink project; it has too high of a risk for failure
 
Based on these rules, because none of Efactors E1 through E6 have a value less than 3 and only Efactor E8 has a value greater than 3, the sum of the number EFactors is 1. Thus, the system should use a PHM of 20. Plugging the values for UCP (33.3375) and PHM (20) into the effort equation (UCP * PHM) gives an estimated number of person-hours of 666.75 hours (see Figures 2-15 and 2-16).
CREATING AND MANAGING THE WORKPLAN	
Once a project manager has a general idea of the functionality and effort for the project, he or she creates a workplan, which is a dynamic schedule that records and keeps track of all the tasks that need to be accomplished over the course of the project. The workplan lists each task, along with important information about it, such as when it needs to be completed, the person assigned to do the work, and any deliverables that will result. The level of detail and the amount of information captured by the workplan depend on the needs of the project, and the detail usually increases as the project progresses.
The overall objectives for the system should be listed on the system request, and it is the project manager’s job to identify all the tasks that need to be accomplished to meet those objectives. This sounds like a daunting task. How can someone know everything that needs to be done to build a system that has never been built before?
One approach for identifying tasks is to get a list of tasks that has already been devel- oped and to modify it. There are standard lists of tasks, or methodologies, that are available for use as a starting point. As we stated in Chapter 1, a methodology is a formalized approach to implementing a systems development process (i.e., it is a list of steps and deliverables). A project manager can take an existing methodology, select the steps and deliverables that apply to the current project, and add them to the workplan. If an existing methodology is not available within the organization, methodologies can be purchased from consultants or ven- dors, or books such as this textbook can serve as a guide. Because most organizations have a methodology they use for projects, using an existing methodology is the most popular way to create a workplan. In our case, because we are using a Unified Process-based methodology, we can use the phases, workflows, and iterations as a starting point to create an evolutionary work breakdown structure and an iterative workplan.
Evolutionary Work Breakdown Structures and Iterative Workplans7 Because object-oriented systems approaches to systems analysis and design support incre- mental and iterative development, any project planning approach for object-oriented systems
7 This material in this section is based on Walker Royce, Software Project Management: A Unified Framework (Read- ing, MA: Addison-Wesley, 1998).
 

development also requires an incremental and iterative process. In the description of the enhanced Unified Process in Chapter 1, the development process was organized around iterations, phases, and workflows. In many ways, a workplan for an incremental and iterative development process is organized in a similar manner. For each iteration, there are different tasks executed on each workflow. This section describes an incremental and iterative process using evolutionary WBSs for project planning that can be used with object-oriented systems development.
Evolutionary WBSs allow the analyst to develop an iterative workplan. First, evolutionary WBSs are organized in a standard manner across all projects: by workflows, phases, and then the specific tasks that are accomplished during an individual iteration. Second, evolutionary WBSs are created in an incremental and iterative manner. This encourages a more realistic view of both cost and schedule estimation. Third, because the structure of an evolutionary WBS is not tied to any specific project, evolutionary WBSs enable the comparison of the current project to earlier projects. This supports learning from past successes and failures.
In the case of the enhanced Unified Process, the workflows are the major points listed in the WBS. Next, each workflow is decomposed along the phases of the enhanced Unified Process. After that, each phase is decomposed along the tasks that are to be completed to cre- ate the deliverables associated with an individual iteration contained in each phase (see Figure 1-16). The template for the first two levels of an evolutionary WBS for the enhanced Unified Process would look like Figure 2-17.
As each iteration through the development process is completed, additional iterations and tasks are added to the WBS (i.e., the WBS evolves along with the evolving information system).8
For example, typical activities for the inception phase of the project management workflow would include identifying the project, performing the feasibility analysis, selecting the project, and estimating the effort. The inception phase of the requirements workflow would include determining the requirements gathering and analysis techniques, identifying functional and nonfunctional requirements, interviewing stakeholders, developing a vision document, and developing use cases. Probably no tasks are associated with the inception phase of the operations and support workflow. A sample evolutionary WBS for planning the inception phase of the enhanced Unified Process, based on Figures 1-16 and 2-17, is shown in Figure 2-18. Notice the last two tasks for the project management workflow are “create workplan for first iteration of the elaboration phase” and “assess the inception phase”; the last two things to do are to plan for the next iteration in the development of the evolving system and to assess the current iteration. As the project moves through later phases, each workflow has tasks added to its iterations. For example, the analysis workflow will have the creation of the functional, structural, and behav- ioral models during the elaboration phase. Finally, when an iteration includes a lot of complex tasks, traditional tools, such as Gantt charts and network diagrams, can be used to detail the workplan for that specific iteration.
